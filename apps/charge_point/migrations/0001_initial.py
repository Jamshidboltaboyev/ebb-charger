# Generated by Django 4.2 on 2023-11-08 23:40

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Наименование')),
                ('address', models.CharField(max_length=100, verbose_name='Адрес')),
                ('landmark', models.CharField(max_length=100, null=True, verbose_name='Ориентир')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Длина')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Широта')),
            ],
            options={
                'verbose_name': 'Адрес',
                'verbose_name_plural': 'Адреса',
            },
        ),
        migrations.CreateModel(
            name='AuthorizationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(verbose_name='Время')),
            ],
            options={
                'verbose_name': 'Запрос на авторизация',
                'verbose_name_plural': 'Запросы на авторизация',
            },
        ),
        migrations.CreateModel(
            name='ChargePoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Названия')),
                ('model', models.CharField(max_length=128, verbose_name='Модель')),
                ('vendor', models.CharField(max_length=128, verbose_name='Производитель')),
                ('serial_number', models.CharField(blank=True, max_length=25, null=True, verbose_name='Серия')),
                ('firmware', models.CharField(blank=True, max_length=50, null=True, verbose_name='Прошивка')),
                ('type', models.CharField(blank=True, max_length=25, null=True, verbose_name='Тип')),
                ('last_heartbeat', models.DateTimeField(blank=True, null=True, verbose_name='Последняя подключения')),
                ('boot_timestamp', models.DateTimeField(blank=True, null=True, verbose_name='Время загрузки')),
                ('identity', models.CharField(max_length=50, verbose_name='Идентификация')),
                ('connected', models.BooleanField(default=False, verbose_name='Подключен')),
                ('status', models.BooleanField(default=False, verbose_name='Активный')),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Станция',
                'verbose_name_plural': 'Станции',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ChargePointError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_code', models.CharField(max_length=50, null=True, verbose_name='Код ошибки')),
                ('info', models.CharField(max_length=50, null=True, verbose_name='Info')),
                ('status', models.CharField(max_length=50, null=True, verbose_name='Status')),
                ('timestamp', models.DateTimeField(verbose_name='Время')),
                ('vendor_id', models.CharField(max_length=255, null=True, verbose_name='Вендор')),
                ('vendor_error_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Код ошибки вендора')),
            ],
        ),
        migrations.CreateModel(
            name='ChargePointTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_type', models.CharField(choices=[('ReserveNow', 'ReserveNow'), ('CancelReservation', 'CancelReservation'), ('ChangeAvailability', 'ChangeAvailability'), ('RemoteStartTransaction', 'RemoteStartTransaction'), ('RemoteStopTransaction', 'RemoteStopTransaction'), ('UnlockConnector', 'UnlockConnector')], max_length=32, verbose_name='Tip')),
                ('response_text', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Javob')),
                ('running', models.BooleanField(default=False, verbose_name='Olindi')),
                ('done', models.BooleanField(default=False, verbose_name='Tugadi')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Vaqt')),
            ],
        ),
        migrations.CreateModel(
            name='Connector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, null=True, verbose_name='Наименование')),
                ('connector_id', models.IntegerField(verbose_name='№ коннектора')),
                ('available', models.BooleanField(default=False, verbose_name='Доступен?')),
                ('in_use', models.BooleanField(default=False, verbose_name='Занят?')),
                ('status', models.CharField(choices=[('Available', 'Available'), ('Preparing', 'Preparing'), ('Charging', 'Charging'), ('SuspendedEVSE', 'Suspended Evse'), ('SuspendedEV', 'Suspended Ev'), ('Finishing', 'Finishing'), ('Reserved', 'Reserved'), ('Unavailable', 'Unavailable'), ('Faulted', 'Faulted')], default='Unavailable', max_length=50, verbose_name='Статус')),
                ('icon', models.TextField(null=True, verbose_name='Значок')),
                ('charge_point', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='connectors', to='charge_point.chargepoint')),
            ],
            options={
                'verbose_name': 'Коннектор',
                'verbose_name_plural': 'Коннекторы',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ConnectorType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name='Наименование')),
                ('count_amper', models.CharField(max_length=50, null=True, verbose_name='Количество тока')),
                ('count_phase', models.CharField(max_length=50, null=True, verbose_name='Количество фаза')),
                ('type', models.CharField(choices=[('AC', 'Ac'), ('DC', 'Dc')], max_length=10)),
            ],
            options={
                'verbose_name': 'Тип соединения',
                'verbose_name_plural': 'Типы соединения',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Страна',
                'verbose_name_plural': 'Страны',
            },
        ),
        migrations.CreateModel(
            name='PowerUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Единица измерения',
                'verbose_name_plural': 'Единица измерении',
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_type', models.IntegerField(choices=[(1, 'Sum/kWh'), (2, 'Sum/hour'), (2, 'Locking/min')], default=1, verbose_name='Тип')),
                ('price', models.IntegerField(verbose_name='Цена')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Время начало')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Время окончания')),
            ],
            options={
                'verbose_name': 'Цена',
                'verbose_name_plural': 'Цены',
            },
        ),
        migrations.CreateModel(
            name='TokenGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=20, verbose_name='Token')),
            ],
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=20, verbose_name='Token')),
                ('token_group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tokens', to='charge_point.tokengroup')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, verbose_name='Наименование')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='regions', to='charge_point.country', verbose_name='Страна')),
            ],
            options={
                'verbose_name': 'Регион',
                'verbose_name_plural': 'Регионы',
            },
        ),
        migrations.CreateModel(
            name='PriceChargePointConnector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_type', models.IntegerField(choices=[(1, 'Sum/kWh'), (2, 'Sum/hour'), (2, 'Locking/min')], default=1, verbose_name='Тип')),
                ('price', models.CharField(max_length=20, verbose_name='Цена')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Время начало')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Время окончания')),
                ('connector', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='charge_point.connector', verbose_name='Коннектор')),
            ],
            options={
                'verbose_name': 'Цена коннектор',
                'verbose_name_plural': 'Цены коннектор',
            },
        ),
        migrations.CreateModel(
            name='PowerGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.FloatField(verbose_name='Количество')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='power_group', to='charge_point.powerunit', verbose_name='Ед.изм')),
            ],
            options={
                'verbose_name': 'Группа мощность',
                'verbose_name_plural': 'Группы мощносты',
            },
        ),
        migrations.CreateModel(
            name='InProgressTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_timestamp', models.DateTimeField(verbose_name='Время начала')),
                ('meter_start', models.IntegerField(verbose_name='Начало счетчика')),
                ('reservation_id', models.IntegerField(blank=True, null=True)),
                ('current', models.FloatField(default=0.0, verbose_name='Ток')),
                ('energy', models.FloatField(default=0.0, verbose_name='Энергия')),
                ('power', models.FloatField(default=0.0, verbose_name='Мощность')),
                ('soc', models.SmallIntegerField(default=0, verbose_name='Текущий %')),
                ('voltage', models.FloatField(default=0.0, verbose_name='Напряжения')),
                ('end', models.BooleanField(default=False, verbose_name='Закончен')),
                ('connector', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='in_progress_transactions', to='charge_point.connector', verbose_name='Коннектор')),
                ('start_token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='starting_transactions', to='charge_point.token')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='in_progress_transactions', to='accounts.user')),
            ],
            options={
                'verbose_name': 'Не законченная транзакция',
                'verbose_name_plural': 'Не законченные транзакции',
            },
        ),
        migrations.CreateModel(
            name='FavoriteChargePoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('charger_point', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_favorites', to='charge_point.chargepoint', verbose_name='Станция')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_favorites', to='accounts.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Избранные',
                'verbose_name_plural': 'Избранные',
            },
        ),
        migrations.CreateModel(
            name='FavoriteAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_favorites', to='charge_point.address', verbose_name='Адрес')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_favorites_address', to='accounts.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Избранные адреса',
                'verbose_name_plural': 'Избранные адреса',
            },
        ),
        migrations.AddField(
            model_name='connector',
            name='connector_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='charge_point.connectortype', verbose_name='Тип соединения'),
        ),
        migrations.AddField(
            model_name='connector',
            name='power',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='charge_point.powergroup', verbose_name='Группы мощность'),
        ),
        migrations.AddField(
            model_name='connector',
            name='price_for_charge',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='for_change', to='charge_point.price', verbose_name='Цена зарядки'),
        ),
        migrations.AddField(
            model_name='connector',
            name='price_for_parking',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='for_parking', to='charge_point.price', verbose_name='Цена парковки'),
        ),
        migrations.AddField(
            model_name='connector',
            name='price_for_wait',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='for_wait', to='charge_point.price', verbose_name='Цена ожидания'),
        ),
        migrations.CreateModel(
            name='CommentsChargePoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(editable=False, verbose_name='Время')),
                ('content', models.TextField(verbose_name='Текст')),
                ('deleted', models.BooleanField(default=False)),
                ('charger_point', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='charge_point.chargepoint', verbose_name='Станция')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
            },
        ),
        migrations.CreateModel(
            name='ChargeTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reservation_id', models.IntegerField(blank=True, null=True)),
                ('start_timestamp', models.DateTimeField(verbose_name='Время начала')),
                ('end_timestamp', models.DateTimeField(verbose_name='Время окончания')),
                ('duration', models.DurationField(verbose_name='Длительность')),
                ('meter_start', models.IntegerField(verbose_name='Начало счетчика')),
                ('meter_stop', models.IntegerField(verbose_name='Конец счетчика')),
                ('meter_used', models.IntegerField(verbose_name='Использовано')),
                ('stop_reason', models.TextField(blank=True, null=True, verbose_name='Причина остановки')),
                ('cost', models.BigIntegerField(default=0, verbose_name='Сумма')),
                ('sent', models.BooleanField(default=False, verbose_name='Отправлено')),
                ('connector', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='charge_point.connector', verbose_name='Коннектор')),
                ('end_token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='end_transactions', to='charge_point.token')),
                ('start_token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='start_transactions', to='charge_point.token')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='charge_transactions', to='accounts.user')),
            ],
            options={
                'verbose_name': 'Транзакция зарядки',
                'verbose_name_plural': 'Транзакции зарядки',
            },
        ),
    ]
